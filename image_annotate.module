<?php
// $Id

/**
 * Implementation of hook_menu()
 */
function image_annotate_menu() {
  $items = array();
  
  $items['image-annotate/create/%node'] = array(
    'title' => 'Save note',
    'page callback' => 'image_annotate_create',
    'page arguments' => array(2),
    'access callback' => 'image_annotate_user_access',
    'type' => MENU_CALLBACK,
  );
  $items['image-annotate/edit/%node'] = array(
    'title' => 'Edit note',
    'page callback' => 'image_annotate_edit',
    'page arguments' => array(2),
    'access callback' => 'image_annotate_user_access',
    'type' => MENU_CALLBACK,
  );
  $items['image-annotate/delete/%'] = array(
    'title' => 'Delete note',
    'page callback' => 'image_annotate_delete',
    'page arguments' => array(2),
    'access callback' => 'image_annotate_user_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function image_annotate_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete':
      db_query("DELETE FROM {image_annotate} WHERE nid = %d", $node->nid);
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function image_annotate_perm() {
  return array('administer image annotations', 'create image annotations', 'view image annotations');
}

/**
 * Edit an annotation
 */
function image_annotate_edit($nid) {
  global $user;
  
  // Initialize JSON response
  $response = array(
    'success' => false, 
    'id' => -1,
    'errors' => array()
  );
  
  $note = db_fetch_object(db_query('SELECT * FROM {image_annotate} WHERE aid = %d', $_POST['aid']));
  
  if (!$note) {
    $response['errors'][] = 'Error loading annotation';
  }
  else if (user_access('administer image annotations') || (user_access('create image annotations') && $user->uid == $note->uid)) {
    db_query(
      'UPDATE {image_annotate} 
        (note, width, height, y, x)
      VALUES 
        (\'%s\', %d, %d, %d, %d)
      WHERE aid = %d',
      $_POST['note'], (int) $_POST['width'], (int) $_POST['height'], (int) $_POST['top'], (int) $_POST['left'], $_POST['aid']
    );
    $response['success'] = true;
    $response['id'] = $_POST['aid'];
  }
  
  drupal_json($response);
  exit();
}

/**
 * Create an annotation
 */
function image_annotate_create($node) {
  global $user;
  
  // Initialize JSON response
  $response = array(
    'success' => false, 
    'id' => -1,
    'errors' => array()
  );
  
  if (user_access('create image annotations') || user_access('administer image annotations')) {
    db_query(
      'INSERT INTO {image_annotate} 
        (nid, uid, note, field_name, delta, size_width, size_height, position_top, position_left)
      VALUES 
        (%d, %d, \'%s\', \'%s\', %d, %d, %d, %d, %d)',
      $node->nid, $user->uid, $_POST['note'], $_POST['field_name'], $_POST['delta'], (int) $_POST['size_width'], (int) $_POST['size_height'], (int) $_POST['position_top'], (int) $_POST['position_left']
    );
    
    $response['success'] = true;
    $response['id'] = db_last_insert_id('imgtag', 'id');
    $response['note'] = '"'. check_plain($_POST['note']) . '"<span class="author"> '. t('by') .' '. theme('username', $user) .'</span>';
  }
  
  echo drupal_json($response);
  exit();
}

/**
 * Delete an annotation
 */
function image_annotate_delete($aid) {
  global $user;
  
  // Initialize JSON response
  $response = array(
    'success' => false,
    'errors' => array()
  );
  
  $note = db_fetch_object(db_query('SELECT * FROM {image_annotate} WHERE aid = %d', $aid));
  
  if (!$note) {
    $response['errors'][] = 'Error loading annotation';
  }
  else if (user_access('administer image annotations') || $user->uid == $note->uid) {
    db_query('DELETE FROM {image_annotate} WHERE aid = %d', $aid);
    $response['success'] = true;
  }
  
  drupal_json($response);
  exit();
}

/**
 * Implementation of CCK's hook_field_formatter_info().
 */
function image_annotate_field_formatter_info() {
  $formatters = array(
    'image_annotate_box' => array(
      'label' => t('Image with box style annotations'),
      'field types' => array('image', 'filefield'),
      'description' => t('Display a picture and its boxy style annotations.'),
    ),
    'image_annotate_circle' => array(
      'label' => t('Image with circle style annotations'),
      'field types' => array('image', 'filefield'),
      'description' => t('Display a picture and its circle style annotations.'),
    ),
  );

  return $formatters;
}

/**
 * Implementation of hook_theme
 */
function image_annotate_theme() {
  return array(
    'image_annotate_formatter_image_annotate_box' => array(
      'arguments' => array('element' => null),
    ),
    'image_annotate_formatter_image_annotate_circle' => array(
      'arguments' => array('element' => null),
    ),
  );
}

/**
 * Return permissions for editing/creating annotations for the current user.
 */
function image_annotate_user_access() {
  return user_access('administer image annotations') || user_access('create image annotations');
}

/**
 * Theme function for the box style image annotate formatter
 */
function theme_image_annotate_formatter_image_annotate_box($element) {
  return theme_image_annotate_formatter_image_annotate($element, 'box', TRUE);
}

/**
 * Theme function for the circle style image annotate formatter
 */
function theme_image_annotate_formatter_image_annotate_circle($element) {
  return theme_image_annotate_formatter_image_annotate($element, 'circle', FALSE);
}

/**
 * Theme function for the image annotate formatter
 */
function theme_image_annotate_formatter_image_annotate($element, $style = 'box', $resizable = TRUE) {
  global $user;
  
  $item = $element['#item'];
  if (empty($item)) {
    return '';
  }
  
  $delta = $element['#item']['#delta'] ? $element['#item']['#delta'] : 0;
  $field = content_fields($element['#field_name']);
  
  if (empty($item['fid']) && $field['use_default_image']) {
    $item = $field['default_image'];
  }
  
  if (empty($item['filepath'])) {
    $item = array_merge($item, field_file_load($item['fid']));
  }
  
  if (user_access('view image annotations') || user_access('create image annotations') || user_access('administer image annotations')) {
    $result = db_query('
      SELECT i.*, u.name
      FROM {image_annotate} i 
      JOIN {users} u
      ON i.uid = u.uid 
      WHERE i.field_name = \'%s\' AND i.delta = %d AND i.nid = %d
      ORDER BY (i.size_height * i.size_width) DESC',
      $field['field_name'], $delta, $element['#node']->vid
    );
    
    // Build the array of notes settings
    $notes = array();
    while ($note = db_fetch_object($result)) {
      $editable = image_annotate_user_access() && $note->uid && $note->uid == $user->uid;
      $text = '"'. check_plain($note->note) . '"<span class="author"> '. t('by') .' '. theme('username', $note) . '</span>';
      $notes[] = array(
        'aid' => $note->aid,
        'nid' => $note->nid,
        'uid' => $note->uid,
        'size_height' => $note->size_height,
        'size_width' => $note->size_width,
        'position_top' => $note->position_top,
        'position_left' => $note->position_left,
        'note' => $text,
        'editable' => $editable,
      );
    }
    
    // CSS id and class for this image
    $id = 'image-annotate-'. $field['field_name'] .'-'. $delta;
    $class = 'imagefield imagefield-'. $field['field_name'] .' image-annotate image-annotate-'. $field['field_name'];
    
    // Build the field settings
    $settings = array(array(
      'nid' => $element['#node']->nid,
      'field' => $field['field_name'],
      'delta' => $delta,
      'id' => $id,
      'notes' => $notes,
      'editable' => image_annotate_user_access(),
      'style' => $style,
      'resizable' => $resizable
    ));
    
    // Load all the JS and CSS magic
    drupal_add_js(array('image_annotate' => $settings), 'setting');
    jquery_ui_add(array('ui.resizable', 'ui.draggable'));
    drupal_add_js(drupal_get_path('module', 'image_annotate') .'/image_annotate.js');
    drupal_add_css(drupal_get_path('module', 'image_annotate') .'/image_annotate.css');
    
    // Load the formatter specific style sheet
    drupal_add_css(drupal_get_path('module', 'image_annotate') ."/$style.css");
    
    return theme('imagefield_image', $item, $item['alt'], $item['title'], array('class' => $class, 'id' => $id));
  }
  else {
    return theme('imagefield_image', $item, $item['alt'], $item['title']);
  }
}
